function [q, q_dot, q_ddot] = cartesian_space_vel_plan(eef_waypoints, joint_configs)

max_vel_eef = 0.1; %m/s
max_acc_eef = 0.05;

no_of_waypoints = size(eef_waypoints, 2);
xf = eef_waypoints(:, end);
xi = eef_waypoints(:, 1);

s_vel_max = max_vel_eef / (xf - xi);
s_acc_max = max_acc_eef / (xf - xi);

s_vel_max(s_vel_max>10) = 0;
s_acc_max(s_acc_max>10) = 0;

T = (s_acc_max + (s_vel_max * s_vel_max))./(s_vel_max * s_acc_max);
T(isnan(T)) = 0;

while 1
    
    % calculate the maximum time required to complete the traj
    T = (s_acc_max + (s_vel_max * s_vel_max)) / (s_vel_max * s_acc_max);
    disp("T")
    disp(T)
    if isnan(T)
        error("no planning required, we are already at final position")
    end
    time_sequence = linspace(0, T, no_of_waypoints);
    
    % define joint values , vel, acc
    q_ = zeros(6, no_of_waypoints);
    q_dot = zeros(6, no_of_waypoints);
    q_ddot = zeros(6, no_of_waypoints);
    
    % v: link frame velocities, speed: link frame speed
    v = zeros(3, no_of_waypoints, 6);
    speed = zeros(1, no_of_waypoints, 6);

    s = zeros(1, no_of_waypoints);
    s_dot = zeros(1, no_of_waypoints);
    s_ddot = zeros(1, no_of_waypoints);

    % calculate eef velocities
    for i=1:no_of_waypoints
        t = time_sequence(i);
    
        if (t >= 0) && (t <= v/a)
            s(i) = a * t * t / 2;
            s_dot(i) = a * t;
            s_ddot(i) = a;
    
        elseif (t > v/a) && (t <= T - (v/a))
            s(i) = t* v - (v*v/(2*a));
            s_dot(i) = v;
            s_ddot(i) = 0;
    
        elseif (t > T - (v/a)) && (t <= T)
            s(i) = -1 * ( (a*a*(T-t)*(T-t)) + (2*v*v) - (2*T*a*v) )/(2*a);
            s_dot(i) = a * (T - t);
            s_ddot(i) = -1 * a;
    
        else % t>T
            s(i) = 1;
            s_dot(i) = 0;
            s_ddot(i) = 0;
        end
    
    x = xi + (xf-xi) *s;
    x_dot = (xf-xi) * s_dot;
    x_ddot = (xf-xi) * s_ddot;

    % calculate joint velocities
    for i=1:6
        q(i, :) = joint_configs(i, :);
        q_dot(i)
    end

    % calculate link frame velocties
    for j = 1:1:no_of_waypoints
        joint_config_i = joint_configs(j);
        [v(:, j, 1), v(:, j, 2), v(:, j, 3), v(:, j, 4), v(:, j, 5), v(:, j, 6)] = calculate_frame_vel(q_(:, j), q_dot(:, j));
    end
    
    % calculate link frame speeds
    speed(1, :, :) = sqrt(sum(v.*v, 1));

    % check if all the speed is less than 0.1 m/s
    if all(speed < 0.1, "all")
        break
    else
        q_v(argmaxindex) = q_v(argmaxindex) - (0.005/(abs( final_q(argmaxindex) - initial_q(argmaxindex) ) ) );
    end
    
end

end

end